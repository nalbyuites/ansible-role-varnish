# This source file is subject to the (Open Source Initiative) BSD license
# that is bundled with this package in the LICENSE file. It is also available
# through the world-wide-web at this URL: http://www.ontic.com.au/license.html
# If you did not receive a copy of the license and are unable to obtain it through
# the world-wide-web, please send an email to license@ontic.com.au immediately.
# Copyright (c) 2010-2016 Ontic. (http://www.ontic.com.au). All rights reserved.

---

- name: 'Varnish | Create Varnish PID directory.'
  become: yes
  file:
    path: '{{ varnish_pid_path }}'
    state: 'directory'
    owner: 'varnish'
    group: 'varnish'
    mode: '0755'

- name: 'Varnish | Change PID file path for Varnish in CentOS 6 init script.'
  become: yes
  lineinfile:
    dest: /etc/init.d/varnish
    regexp: '^pidfile='
    line: 'pidfile={{ varnish_pid_path }}/varnish.pid'
  when: '{{ ansible_os_family == "RedHat" and ansible_distribution_major_version|int < 7 }}'

- name: 'Varnish | Configure service init file.'
  become: yes
  template:
    src: '{{ varnish_service_template }}'
    dest: '/etc/systemd/system/varnish.service'
    owner: 'root'
    group: 'root'
    mode: '0655'
  when: '{{ varnish_service_template | default(None) != None }}'
  notify:
    - 'reload systemd'
    - 'restart varnish'

- name: 'Varnish | Configure system configuration file.'
  become: yes
  template:
    src: '{{ varnish_system_config_template }}'
    dest: '{{ varnish_system_config_path }}'
    owner: 'root'
    group: 'root'
    mode: '0755'

- name: 'Varnish | Configure ownership of configuration directory.'
  become: yes
  file:
    path: '{{ varnish_config_path }}'
    state: 'directory'
    owner: 'root'
    group: 'root'
    mode: '0755'

- name: 'Varnish | Configure secret file.'
  become: yes
  command: dd if=/dev/random of='{{ varnish_config_path }}/secret' count=1

- name: 'Varnish | Configure default VCL.'
  become: yes
  template:
    src: '{{ varnish_default_vcl_template }}'
    dest: '{{ varnish_config_path }}/default.vcl'
    owner: 'root'
    group: 'root'
    mode: '0644'
  when: '{{ varnish_use_default_vcl }}'
  notify: 'restart varnish'

- name: 'Varnish | Configure iptables for Varnish on CentOS.'
  become: yes
  template:
    src: '{{ varnish_iptables_template }}'
    dest: '{{ default_system_config_path }}/iptables'
    owner: 'root'
    group: 'root'
    mode: '0644'
  when: yes
  notify: 'restart iptables'

- name: 'Varnish Agent | Generate random password'
  become: yes
  shell: echo varnish:`tr -d -c "a-zA-Z0-9-%^&*()_+~" < /dev/urandom | head -c 30` > '{{ varnish_agent_secret_file }}'

- name: 'Varnish Agent | Install Dashboard'
  become: yes
  git:
    repo: https://github.com/brandonwamboldt/varnish-dashboard.git
    dest: '{{ varnish_dashboard_path }}'
  ignore_errors: yes

- name: 'Varnish Agent | Configuration file'
  become: yes
  template:
    src: '{{ varnish_dashboard_template }}'
    dest: '{{ varnish_dashboard_path }}/config.js'
    owner: 'root'
    group: 'root'
    mode: '0644'

- name: 'Varnish Agent | Configure Dashboard configuration file.'
  become: yes
  template:
    src: '{{ varnish_agent_default_system_config_template }}'
    dest: '{{ varnish_agent_default_system_config_path }}'
    owner: 'root'
    group: 'root'
    mode: '0644'

- name: 'Varnishncsa | Enable logging with custom format.'
  become: yes
  template:
    src: '{{ varnishncsa_system_config_template }}'
    dest: '{{ default_system_config_path }}/varnishncsa'
    owner: 'root'
    group: 'root'
    mode: '0755'

- name: 'Sudo | Make sure we have a wheel group.'
  group:
    name: wheel
    state: present

- name: 'Sudo | Allow wheel group to have passwordless sudo.'
  lineinfile:
    dest: /etc/sudoers
    state: present
    regexp: '^%wheel'
    line: '%wheel ALL=(ALL) NOPASSWD: ALL'

- name: 'Sudo | Add a non-root user in group wheel.'
  become: yes
  user:
    name: '{{ ssh_nonroot_user }}'
    shell: '/bin/bash'
    home: '/home/{{ ssh_nonroot_user }}'
    groups: 'wheel'
    append: 'yes'
    state: 'present'

- name: 'SSH | Use previously generated dashboard password.'
  set_fact:
    # Could not use a variable within another. Needs a re-look to avoid specifying the file directly.
    ssh_pass: "{{ lookup('csvfile', 'varnish file=/etc/varnish/agent_secret delimiter=:') }}"

- name: 'SSH | Set password for the non-root user.'
  become: yes
  shell: echo -e "{{ ssh_pass }}\n{{ ssh_pass }}" | passwd '{{ ssh_nonroot_user }}'

- name: 'SSH | Set password for root user.'
  become: yes
  shell: echo -e "{{ ssh_pass }}\n{{ ssh_pass }}" | passwd

- name: 'SSH | Allow password-based SSH access.'
  lineinfile:
    dest: /etc/ssh/sshd_config
    state: present
    regexp: '^PasswordAuthentication'
    line: 'PasswordAuthentication yes'
  notify: 'restart sshd'
